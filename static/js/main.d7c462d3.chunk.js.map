{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","className","style","recipe","map","ingredient","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"6QAkBeA,EAfA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACxC,OACE,sBAAKC,UAAWC,IAAMC,OAAtB,UACE,6BAAKN,IACL,6BACGG,EAAYI,KAAI,SAACC,GAAD,OACf,6BAAKA,EAAWC,YAGpB,8BAAIR,EAAJ,eACA,qBAAKG,UAAWC,IAAMH,MAAOQ,IAAKR,EAAOS,IAAI,SCiEpCC,G,MA1EH,WACV,IADgB,EAKcC,mBAAS,IALvB,mBAKTC,EALS,KAKAC,EALA,OAQYF,mBAAS,IARrB,mBAQTG,EARS,KAQDC,EARC,OAWUJ,mBAAS,WAXnB,mBAWTK,EAXS,KAWFC,EAXE,KAchBC,qBAAU,WACRC,MACC,CAACH,IAGJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEAEMC,MAAM,mCAAD,OACSL,EADT,mBApBf,WAoBe,oBAnBd,qCAiBG,cAEXM,EAFW,gBAMEA,EAASC,OANX,OAMXC,EANW,OAOjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MARA,2CAAH,qDAuBhB,OACE,qCACE,oBAAIvB,UAAU,SAAd,+BACA,sBAAKA,UAAU,MAAf,UACE,uBAAM0B,SATM,SAACC,GACjBA,EAAEC,iBACFb,EAASH,IAOsBZ,UAAU,cAArC,UACE,uBACEA,UAAU,aACV6B,KAAK,OACLC,MAAOlB,EACPmB,SApBW,SAACJ,GACpBd,EAAUc,EAAEK,OAAOF,OACnBN,QAAQC,IAAIb,MAoBN,wBAAQZ,UAAU,gBAAgB6B,KAAK,SAAvC,uBAIF,qBAAK7B,UAAU,UAAf,SACGU,EAAQP,KAAI,SAACD,GAAD,OAEX,aADA,CACC,EAAD,CAEEN,MAAOM,EAAOA,OAAO+B,MACrBpC,SAAUK,EAAOA,OAAOL,SACxBC,MAAOI,EAAOA,OAAOJ,MACrBC,YAAaG,EAAOA,OAAOH,aAJtBG,EAAOA,OAAO+B,oBCrDlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,yB","file":"static/js/main.d7c462d3.chunk.js","sourcesContent":["import React from \"react\";\nimport style from \"./recipe.module.css\";\n\nconst Recipe = ({ title, calories, image, ingredients }) => {\n  return (\n    <div className={style.recipe}>\n      <h1>{title}</h1>\n      <ol>\n        {ingredients.map((ingredient) => (\n          <li>{ingredient.text}</li>\n        ))}\n      </ol>\n      <p>{calories} calories</p>\n      <img className={style.image} src={image} alt=\"\" />\n    </div>\n  );\n};\n\nexport default Recipe;\n","import React, { useState, useEffect } from \"react\";\nimport Recipe from \"./Recipe\";\nimport \"./App.css\";\n\nconst App = () => {\n  const APP_ID = \"5ccfc0d5\";\n  const APP_KEY = \"6fc27514f0e252c681f20a8d8d36dc43\";\n\n  //create a state that affects the API response for recipes\n  const [recipes, setRecipes] = useState([]);\n\n  //create a state that toggles when a user clicks search\n  const [search, setSearch] = useState(\"\");\n\n  //create a state that toggles a change to the user's query and manipulates the API URL\n  const [query, setQuery] = useState(\"chicken\");\n\n  //get new recipes every time we complete a search\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  //use Async - Await for API calls\n  const getRecipes = async () => {\n    //you must await the call and use fetch method with the GET request URL\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    //create data variable that parses out the response from the api call\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n\n  //need to create a function that changes the URL based on the user's search query\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n    console.log(search);\n  };\n\n  //need to prevent the API from being called until the user has completed inputing their query and clicked on the submit btn\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n  };\n\n  return (\n    <>\n      <h1 className=\"header\">Recipe Finder App</h1>\n      <div className=\"App\">\n        <form onSubmit={getSearch} className=\"search-form\">\n          <input\n            className=\"search-bar\"\n            type=\"text\"\n            value={search}\n            onChange={updateSearch}\n          />\n          <button className=\"search-button\" type=\"submit\">\n            Search\n          </button>\n        </form>\n        <div className=\"recipes\">\n          {recipes.map((recipe) => (\n            //create props to grab the values from the objects within the api\n            <Recipe\n              key={recipe.recipe.label}\n              title={recipe.recipe.label}\n              calories={recipe.recipe.calories}\n              image={recipe.recipe.image}\n              ingredients={recipe.recipe.ingredients}\n            />\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"image\":\"recipe_image__BtdIE\"};"],"sourceRoot":""}